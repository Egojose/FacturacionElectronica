@model Enovel.Canacol.FacturacionElectronica.Models.tblUsuariosProveedor

@{
    Layout = null;
    ViewBag.Title = "Inscripcion";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Facturación Electronica</title>
    <link rel="stylesheet" href="~/Content/bootstrap.min.css" />
    <link href="~/Content/all.css" rel="stylesheet" />
    <link href="~/Content/menu.css" rel="stylesheet" />
    <link href="~/Content/facturacion-electronica.css" rel="stylesheet" />
    <link href="~/Content/sweetalert.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.3.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/sweetalert.min.js"></script>
    <script src="~/Scripts/facturacionElectronica.js"></script>
    <script src="~/Scripts/Inscripcion.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark NavBarCanacol">
        <a href="/"><img class="navbar-brand" src="~/Content/images/logo-master.png" alt="logo"></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
        </div>
    </nav>

    @using (Html.BeginForm(Html.BeginForm("Create", "Inscripcion", FormMethod.Post, new { encType = "multipart/form-data" })))
    {
        @Html.AntiForgeryToken()
        <div class="container main-container">

            <h2>Inscripcion</h2>

            <p>Inscripción Portal Ventanilla Virtual</p>

            <div class="form-row">
                <div class="form-group required col-md-6">
                    <label class="control-label" for="Nit">Nit</label>
                    @Html.EditorFor(model => model.UsuarioNit, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                    @Html.ValidationMessageFor(model => model.UsuarioNit, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6 botonera">
                    <button id="btnvalidarNit" class="btn btn-primary" type="button" onclick="ValidateNit();">Validar Nit</button>
                </div>
            </div>

            <div class="data-general">

                <div class="form-row">
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.RazonSocial, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RazonSocial, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                        @Html.ValidationMessageFor(model => model.RazonSocial, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.IDCalidadTributaria, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownList("IDCalidadTributaria", ViewBag.taxqualitiesListName as SelectList, htmlAttributes: new { @class = "form-control", @style = "text-transform:uppercase" })
                        @Html.ValidationMessageFor(model => model.IDCalidadTributaria, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                        @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.RepresentanteLegal, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RepresentanteLegal, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                        @Html.ValidationMessageFor(model => model.RepresentanteLegal, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">

                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.RutaRut, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.RutaRut, htmlAttributes: new { @class = "form-control", @type = "file", @name = "FileRut", @id = "FileRut", @accept = "application/pdf" })
                        @Html.ValidationMessageFor(model => model.RutaRut, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group required col-md-6">
                        @Html.LabelFor(model => model.RutaCamaraComercio, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.RutaCamaraComercio, htmlAttributes: new { @class = "form-control", @type = "file", @name = "FileCamaraComercio", @id = "FileCamaraComercio", @accept = "application/pdf" })
                        @Html.ValidationMessageFor(model => model.RutaCamaraComercio, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group required col-md-5">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group view-password col-md-1">
                        <img id="showPassword" class="show-password" src="~/Content/Images/viewPassword.png" />
                    </div>
                    <div class="form-group required col-md-5">
                        @Html.LabelFor(model => model.ConfirmarPassword, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ConfirmarPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfirmarPassword, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group view-password col-md-1">
                        <img id="showConfirmPassword" class="show-password" src="~/Content/Images/viewPassword.png" />
                    </div>
                </div>

                <input type="submit" value="Inscribir" class="btn btn-primary" />

            </div>

            @if (TempData["alert"] != null)
            {
                @Html.Raw(TempData["alert"])
            }
        </div>
    }


    <footer class="footer text-center">
        <div class="container">
            <p>
                &copy; 2019 ENOVEL S.A
            </p>
        </div>
    </footer>

    <script type="text/javascript">
        function ValidateNit() {
            let userNit = $("#UsuarioNit").val();
            if (!userNit) {
                alertError("Nit vacío", "Por favor escriba un NIT válido");
            } else {
                $.ajax({
                    type: 'POST',
                    dataType: 'json',
                    url: '@Url.Action("ValidateNitProvider", "Inscripcion")',
                    data: { providerNit: userNit },
                    success: function (data) {
                        showDataGeneral();
                    },
                    error: function (xhr, status, error) {
                        alertError("Nit inválido", "Este NIT no existe en nuestra base de datos de proveedores, comuníquese al número de teléfono xxxx-xxx-xxxx");
                        hideDataGeneral();
                    }
                });
            }
         }
    </script>

</body>

</html>










