using Enovel.Canacol.FacturacionElectronica.Models;
using System;
using System.Data.Entity.Validation;
using System.Linq;
using System.Web.Mvc;

namespace Enovel.Canacol.FacturacionElectronica.Controllers
{
    public class InscripcionController : Controller
    {

        public string CurrentController
        {
            get
            {
                return this.ControllerContext.RouteData.Values["controller"].ToString();
            }
        }

        public ActionResult Inscripcion()
        {
            bdFacturacionElectronicaEntitiesModel entities = new bdFacturacionElectronicaEntitiesModel();
            var taxqualities = entities.tblCalidadTributarias.ToList();
            SelectList taxqualitiesList = new SelectList(taxqualities, "ID", "Nombre");
            ViewBag.taxqualitiesListName = taxqualitiesList;
            return View();
        }

        [HttpPost]
        public ActionResult Create(tblUsuariosProveedor userModel)
        {
            
            string message = string.Empty;
            BindTaxQuality(userModel);

            if (userModel.Password.Equals(userModel.ConfirmarPassword))
            {
                int statusUser = validateUser(userModel);
                switch (statusUser)
                {
                    case 2:
                        message = "Usuario no existe en la tabla de proveedores activos de Canacol, comuniquese al XXXXX-XXXXX";
                        ViewBag.Message = message;
                        userModel.FEErrorMessage = message;
                        break;
                    case 1:
                        message = "El usuario que intenta inscribir ya fue registrado anteriormente";
                        ViewBag.Message = message;
                        userModel.FEErrorMessage = message;
                        break;
                    case 0:
                        AddProviderUser(userModel);
                        break;
                }
            }
            else
            {
                message = "Las claves no coinciden, por favor intente de nuevo";
                ViewBag.Message = message;
                userModel.FEErrorMessage = message;
            }

            return View(CurrentController, userModel);
        }

        private void AddProviderUser(tblUsuariosProveedor userModel)
        {

            try
            {
                bdFacturacionElectronicaEntitiesModel entities = new bdFacturacionElectronicaEntitiesModel();
                entities.tblUsuariosProveedors.Add(new tblUsuariosProveedor
                {
                    UsuarioNit = userModel.UsuarioNit,
                    Password = userModel.Password,
                    RazonSocial = userModel.RazonSocial,
                    IDCalidadTributaria = userModel.IDCalidadTributaria,
                    Email = userModel.Email,
                    Telefono = userModel.Telefono,
                    Direccion = userModel.Direccion,
                    RepresentanteLegal = userModel.RepresentanteLegal,
                    RutaRut = string.Empty,
                    RutaCamaraComercio = string.Empty,
                    Estado = "Activo",
                    CreatedDate = DateTime.Now,
                    FEErrorMessage = "Usuario creado correctamente"
                });
                entities.SaveChanges();
            }
            catch (DbEntityValidationException e)
            {
                
            }
        }

        private void BindTaxQuality(tblUsuariosProveedor userModel)
        {
            bdFacturacionElectronicaEntitiesModel entities = new bdFacturacionElectronicaEntitiesModel();
            var taxqualities = entities.tblCalidadTributarias.ToList().Where(t => t.ID == userModel.IDCalidadTributaria);
            SelectList taxqualitiesList = new SelectList(taxqualities, "ID", "Nombre");
            ViewBag.taxqualitiesListName = taxqualitiesList;
        }


        public int validateUser(tblUsuariosProveedor userModel)
        {
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     Status 2 = No existe en la tabla de proveedores activos
            //     Status 1 = El usuario ya existe en la tabla de usuarios
            //     Status 0 = El usuario no está registrado
            //------------------------------------------------------------------------------

            bdFacturacionElectronicaEntitiesModel entities = new bdFacturacionElectronicaEntitiesModel();
            var existUser = entities.tblUsuariosProveedors.Where(u => u.UsuarioNit == userModel.UsuarioNit).FirstOrDefault();
            if(existUser != null)
            {
                return 1;
            }
            else
            {
                var IsActiveProvider = entities.tblProveedors.Where(p => p.Nit == userModel.UsuarioNit).FirstOrDefault();
                return (IsActiveProvider != null) ? 0 : 2;
            }
        }
    }
}